{"version":3,"sources":["script.js"],"names":["form","document","querySelector","recipeField","msgContainer","recipeContainer","msgHideBtn","recipeIds","addEventListener","e","preventDefault","payload","recipe","value","focus","xhr","XMLHttpRequest","open","setRequestHeader","responseType","onload","readyState","res","response","code","style","display","recipes","results","lastElementChild","removeChild","length","forEach","index","push","id","cardHtml","image","title","insertAdjacentHTML","onerror","send","JSON","stringify","target","classList","contains","ingredientsContainer","nextElementSibling","_","btnId","split","recipeId","Number","lastChild","httpReq","status","ingredients","ingredient","ingredientHtml","name","console","log"],"mappings":"AAAA,aAEA,MAAMA,KAAOC,SAASC,cAAc,SAC9BC,YAAcF,SAASC,cAAc,kBACrCE,aAAeH,SAASC,cAAc,6BACtCG,gBAAkBJ,SAASC,cAAc,6BACzCI,WAAaL,SAASC,cAAc,mBAEpCK,UAAY,GAMlBP,KAAKQ,iBAAiB,UAAUC,IAG5BA,EAAEC,iBAEF,MAAMC,EAAU,CAAEC,OAAST,YAAYU,OACvCV,YAAYU,MAAQ,GACpBV,YAAYW,QAIZ,MAAMC,EAAM,IAAIC,eAEhBD,EAAIE,KAAK,OAAQ,cACjBF,EAAIG,iBAAiB,eAAgB,oBACrCH,EAAII,aAAe,OAEnBJ,EAAIK,OAAS,KACT,GAAuB,IAAnBL,EAAIM,WAAkB,CACtB,MAAMC,EAAMP,EAAIQ,SAEhB,GAAID,EAAIE,KAqBDpB,aAAaqB,MAAMC,QAAU,YArBtB,CACV,MAAMC,EAAUL,EAAIM,QAGpB,KAAMvB,gBAAgBwB,kBAClBxB,gBAAgByB,YAAYzB,gBAAgBwB,kBAC5CtB,UAAUwB,OAAS,EAGvBJ,EAAQK,SAAQ,CAACpB,EAAQqB,KAErB1B,UAAU2B,KAAKtB,EAAOuB,IAEtB,MAAMC,EAAW,yFACLxB,EAAOyB,0HAA0HzB,EAAO0B,sGAC/EL,8GAGrE5B,gBAAgBkC,mBAAmB,YAAaH,YAKrDhC,aAAaqB,MAAMC,QAAU,SAGxCX,EAAIyB,QAAU,KACVpC,aAAaqB,MAAMC,QAAU,SAGjCX,EAAI0B,KAAKC,KAAKC,UAAUhC,OAM5BL,YAAYE,iBAAiB,SAAS,KAClCJ,aAAaqB,MAAMC,QAAU,UAOjCrB,gBAAgBG,iBAAiB,SAASC,IAEtC,GAAGA,EAAEmC,OAAOC,UAAUC,SAAS,4BAA6B,CAExD,MAAMC,EAAuBtC,EAAEmC,OAAOI,mBAEtC,GAA0C,UAAvCD,EAAqBtB,MAAMC,QAAqB,CAC/C,MAAOuB,EAAGC,GAAUzC,EAAEmC,OAAS,GAAEO,MAAM,MACjCC,EAAW,CAAEjB,GAAK5B,UAAU8C,OAAOH,KAIzC,KAAMH,EAAqBO,WACvBP,EAAqBjB,YAAYiB,EAAqBO,WAI1D,MAAMC,EAAU,IAAIvC,eAEpBuC,EAAQtC,KAAK,OAAQ,mBACrBsC,EAAQrC,iBAAiB,eAAgB,oBACzCqC,EAAQpC,aAAe,OAEvBoC,EAAQ/C,iBAAiB,QAAS,KAC9B,GAAsB,MAAnB+C,EAAQC,OAAgB,CAEHD,EAAQhC,SAASkC,YAEzBzB,SAAQ0B,IAChB,MAAMC,EAAiB,+BAA+BD,EAAWE,WAEjEb,EAAqBR,mBAAmB,YAAaoB,GACrDZ,EAAqBtB,MAAMC,QAAU,gBAIzCmC,QAAQC,IAAIP,EAAQhC,aAI5BgC,EAAQf,QAAU,IAAMqB,QAAQC,IAAI,wBAEpCP,EAAQd,KAAKC,KAAKC,UAAUS,SAG5B3C,EAAEmC,OAAOI,mBAAmBvB,MAAMC,QAAU","file":"script.js","sourcesContent":["'use strict'\n\nconst form = document.querySelector('.form');\nconst recipeField = document.querySelector('.recipe__field')\nconst msgContainer = document.querySelector('.response__msg__container');\nconst recipeContainer = document.querySelector('.recipe__cards__container');\nconst msgHideBtn = document.querySelector('.msg__hide__btn');\n\nconst recipeIds = [];\n\n\n\n\n//When form is submitted\nform.addEventListener('submit', e => {\n\n    //preventing default nature of form\n    e.preventDefault();\n\n    const payload = { recipe : recipeField.value };\n    recipeField.value = '';\n    recipeField.focus();\n\n\n    //making post request for sending recipe name\n    const xhr = new XMLHttpRequest();\n\n    xhr.open('POST', '/getRecipe');\n    xhr.setRequestHeader('content-type', 'application/json');\n    xhr.responseType = 'json';\n\n    xhr.onload = () => {\n        if (xhr.readyState === 4) {\n            const res = xhr.response;\n\n            if(!res.code) {\n                const recipes = res.results;\n\n                //deleting all the previous recipes to add new ones\n                while(recipeContainer.lastElementChild) {\n                    recipeContainer.removeChild(recipeContainer.lastElementChild);\n                    recipeIds.length = 0;\n                };\n\n                recipes.forEach((recipe, index) => {\n                    \n                    recipeIds.push(recipe.id);\n\n                    const cardHtml = `<div class=\"recipe__card\"><div class=\"recipe__header\">\n                    <img src=\"${recipe.image}\" alt=\"Recipe name\" class=\"recipe__image\" loading=\"lazy\"></div><div class=\"recipe__body\"><h4 class=\"recipe__name\">${recipe.title}</h4>\n                    <button class=\"recipe__ingredients__btn btn\" id=\"ingredients--btn__${index}\">Ingredients</button><div class=\"recipe__ingredients__container\">\n                    </div></div></div>`;\n\n                    recipeContainer.insertAdjacentHTML('beforeend', cardHtml);\n                });\n            }\n            else { msgContainer.style.display = 'block'; }\n        } \n        else { msgContainer.style.display = 'block'; }\n    };\n\n    xhr.onerror = () => {\n        msgContainer.style.display = 'block';\n    }\n\n    xhr.send(JSON.stringify(payload));\n});\n\n\n\n//Event handler for message hide button\nmsgHideBtn?.addEventListener('click', () => {\n    msgContainer.style.display = 'none';\n});\n\n\n\n//Event handler for main Container\n//Here we will use the concept of traversing (navigation among nodes in dom) \nrecipeContainer.addEventListener('click', e => {\n    \n    if(e.target.classList.contains('recipe__ingredients__btn')) {\n\n        const ingredientsContainer = e.target.nextElementSibling;\n\n        if(ingredientsContainer.style.display !== \"block\") {\n            const [_, btnId] = (e.target.id).split('__');\n            const recipeId = { id : recipeIds[Number(btnId)] };\n        \n\n            //removing all the ingredients\n            while(ingredientsContainer.lastChild) { \n                ingredientsContainer.removeChild(ingredientsContainer.lastChild);\n            };\n\n            //making http request to get the ingredients\n            const httpReq = new XMLHttpRequest();\n\n            httpReq.open('POST' ,'/getIngredients');\n            httpReq.setRequestHeader('content-type', 'application/json');\n            httpReq.responseType = 'json';\n\n            httpReq.addEventListener('load',  () => {\n                if(httpReq.status === 200) {\n                    \n                    const ingredients = httpReq.response.ingredients;\n\n                    ingredients.forEach(ingredient => {\n                        const ingredientHtml = `<p class=\"ingredient__name\">${ingredient.name}</p>`;\n                        \n                        ingredientsContainer.insertAdjacentHTML('beforeend', ingredientHtml);\n                        ingredientsContainer.style.display = 'block';\n                    });\n                }\n                else {\n                    console.log(httpReq.response);\n                }\n            });\n\n            httpReq.onerror = () => console.log('Something went wrong');\n\n            httpReq.send(JSON.stringify(recipeId));\n        }\n        else {\n            e.target.nextElementSibling.style.display = 'none';\n        }\n        \n    }\n});\n"]}